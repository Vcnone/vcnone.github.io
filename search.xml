<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo同时部署GitHub Page与云服务器</title>
      <link href="/2021/10/25/Hexo%E5%90%8C%E6%97%B6%E9%83%A8%E7%BD%B2GitHub%20Page%E4%B8%8E%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2021/10/25/Hexo%E5%90%8C%E6%97%B6%E9%83%A8%E7%BD%B2GitHub%20Page%E4%B8%8E%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>参考</strong>：<a href="https://www.jianshu.com/p/70bf58c48010" title="HEXO 部署到云服务器详细指南">HEXO部署到云服务器详细指南</a>，<a href="https://www.jianshu.com/p/271449df801f" title="Hexo教程：Hexo博客部署到腾讯云教程">Hexo教程：Hexo 博客部署到腾讯云教程</a></p><hr><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>核心是在原本Github Page推送的基础上，增加一条推送向云服务器的<code>deploy</code>，适用于增加更多部署。</p><h2 id="GitHub-Page"><a href="#GitHub-Page" class="headerlink" title="GitHub Page"></a>GitHub Page</h2><p>已经配置好</p><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>已搭建好LNMP框架下的网页目录，云端、本地均配置了git</p><h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><h2 id="本地git"><a href="#本地git" class="headerlink" title="本地git"></a>本地git</h2><p>生成密钥</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>密钥默认位置：C盘用户文件夹下<code>.ssh</code>中</p><h2 id="云端git"><a href="#云端git" class="headerlink" title="云端git"></a>云端git</h2><h3 id="git用户"><a href="#git用户" class="headerlink" title="git用户"></a>git用户</h3><p>增加git用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser git</span><br></pre></td></tr></table></figure><p>切换到git用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su git</span><br></pre></td></tr></table></figure><p>切换到git用户目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure><h3 id="密钥"><a href="#密钥" class="headerlink" title="密钥"></a>密钥</h3><p>创建.ssh目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir .ssh &amp;&amp; chmod 700 .ssh</span><br></pre></td></tr></table></figure><p>创建<code>authorized_keys</code>公钥保存文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .ssh/authorized_keys &amp;&amp; chmod 600 .ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>在<code>authorized_keys</code>中写入本地生成的公钥</p><h3 id="git仓库"><a href="#git仓库" class="headerlink" title="git仓库"></a>git仓库</h3><p>将<code>home</code>中的git用户文件夹作为仓库目录，初始化一个空的 git 仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init --bare hexoBlog.git</span><br></pre></td></tr></table></figure><p>创建一个新的 git 钩子，用于自动部署。</p><p>在 <code>/home/git/hexoBlog.git</code> 下，有一个自动生成的 <code>hooks</code> 文件夹。我们需要在里边新建一个新的钩子文件 <code>post-receive</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /home/git/hexoBlog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>在该文件中添加两行代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">git --work-tree=/var/www --git-dir=/home/git/hexoBlog.git checkout -f</span><br><span class="line"><span class="comment">#--work-tree是网页目录，--git-dir是git仓库目录</span></span><br></pre></td></tr></table></figure><h2 id="Nginx托管目录"><a href="#Nginx托管目录" class="headerlink" title="Nginx托管目录"></a>Nginx托管目录</h2><p>假设在<code>/var/www</code>，需要更改目录权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R <span class="variable">$USER</span>:<span class="variable">$USER</span> /var/www</span><br></pre></td></tr></table></figure><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>本地的 Hexo 博客所在文件，修改站点配置文件，增加一条推送向云服务器的<code>deploy</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    repo:</span><br><span class="line">    <span class="comment">#增加一行</span></span><br><span class="line">    hexo: git@ip:/home/git/hexoBlog.git,master</span><br><span class="line">    <span class="comment">#这里的@前的git是云服务器的git用户，也可以是root什么的，与云端对应</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Debian </category>
          
          <category> 服务部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Debian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debian下LNMP搭建</title>
      <link href="/2021/09/12/Debian%E4%B8%8BLNMP%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/09/12/Debian%E4%B8%8BLNMP%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p><strong>参考</strong>：<a href="https://blog.csdn.net/weixin_34232363/article/details/88728946" title="Debian9(Stretch) 下编译安装LNMP环境">Debian9(Stretch) 下编译安装LNMP环境</a></p><hr><h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p><strong>apt</strong>安装<strong>MariaDB</strong>，<strong>PHP</strong></p><p><strong>编译</strong>安装<strong>Nginx</strong></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="Nginx-需要的额外库"><a href="#Nginx-需要的额外库" class="headerlink" title="Nginx 需要的额外库"></a>Nginx 需要的额外库</h2><p>主要是三个开发库，<a href="https://www.openssl.org/" title="openssl">openssl</a>，<a href="https://www.zlib.net/" title="zlib">zlib</a>，<a href="https://www.pcre.org/" title="pcre">pcre</a>，可以通过Debian本身的库安装，也可以选择源码安装。<br>编译安装Nginx需要提前安装开发库或下载三个开发库源码包。<br><strong>PS</strong>：这里需要注意源码版本兼容性</p><h1 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h1><h2 id="MariaDB"><a href="#MariaDB" class="headerlink" title="MariaDB"></a>MariaDB</h2><p>安装MariaDB服务端和客户端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install mariadb-server</span><br></pre></td></tr></table></figure><p>安装完成后服务将自动启动，通过以下命令检查服务是否正常</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mariadb</span><br></pre></td></tr></table></figure><p>运行MariaDB安全脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql_secure_installation </span><br></pre></td></tr></table></figure><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p>编译安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/etc/nginx --group=nginx --user=nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/<span class="built_in">log</span>/nginx/error.log --http-log-path=/var/<span class="built_in">log</span>/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module  --with-pcre --with-pcre-jit  --with-openssl=../openssl-1.1.1d --with-openssl-opt=no-nextprotoneg --with-zlib=../zlib- --with-debug --add-module=../nginx-dav-ext-module --add-module=../headers-more-nginx-module</span><br></pre></td></tr></table></figure><p><strong>PS</strong>：如果是使用二进制包安装了zlib,pcre,openssl,及相应的开发库，不需要指定路径。</p><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install php7.4</span><br><span class="line">apt install php7.4-fpm php7.4-mysql</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Debian </category>
          
          <category> 服务部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Debian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx反向代理GithubPage</title>
      <link href="/2021/06/15/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86GIthubPage/"/>
      <url>/2021/06/15/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86GIthubPage/</url>
      
        <content type="html"><![CDATA[<p><strong>参考</strong>：<a href="https://blog.kelu.org/tech/2017/05/06/github-pages-reverse-proxy.html">血衫非弧</a></p><hr><h1 id="DNS重定向"><a href="#DNS重定向" class="headerlink" title="DNS重定向"></a>DNS重定向</h1><p>配置DNS重定向到目标服务器。</p><h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name  域名;</span><br><span class="line">        rewrite ^(.*)$ https://$host$request_uri permanent;    </span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen 443 ssl http2;</span><br><span class="line">        server_name  域名;</span><br><span class="line">        location / </span><br><span class="line">        &#123;</span><br><span class="line">            proxy_pass         http://******.github.io;</span><br><span class="line">            proxy_set_header   X-Host                        $host;</span><br><span class="line">            proxy_set_header   X-Real-IP               $remote_addr;</span><br><span class="line">            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_set_header User-Agent &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36&quot;;</span><br><span class="line">            #缓存</span><br><span class="line">            proxy_cache_valid  200 206 304 301 302 1d; #对httpcode为200…的缓存1天 </span><br><span class="line">            proxy_cache_valid  any 1d;    #其他的缓存多长时间  </span><br><span class="line">            proxy_cache_key $uri;  #定义缓存唯一key,通过唯一key来进行hash存取</span><br><span class="line">        &#125;</span><br><span class="line">        access_log off; #access_log end</span><br><span class="line">        error_log off; #error_log end</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置说明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">proxy_set_header Host $host 设置请求头的Host为反向代理服务器的Host</span><br><span class="line"></span><br><span class="line">proxy_set_header X-Real-IP $remote_addr 设置请求头的X-Real-IP为客户端真实IP</span><br><span class="line"></span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for 把请求来源的IP添加到请求头的X-Forwarded-For字段</span><br><span class="line"></span><br><span class="line">X-Forwarded-For:简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP，只有在通过了HTTP代理或者负载均衡服务器时才会添加该项。 它不是RFC中定义的标准请求头信息，在squid缓存代理服务器开发文档中可以找到该项的详细介绍。 标准格式如下：X-Forwarded-For: client1, proxy1, proxy2。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Debian </category>
          
          <category> 服务部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Debian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GithubPage——Github+Hexo</title>
      <link href="/2021/06/14/GithubPage/"/>
      <url>/2021/06/14/GithubPage/</url>
      
        <content type="html"><![CDATA[<p><strong>参考</strong>：<a href="http://wu.run/2018/12/20/hexo-from-github-2-aliyun/">RunDouble’s Blog</a></p><hr><h1 id="配置Github"><a href="#配置Github" class="headerlink" title="配置Github"></a>配置Github</h1><p>登录到<a href="https://github.com/">GitHub</a>，创建新仓库，仓库名应该为：<strong>用户名</strong>.github.io</p><p><strong>用户名</strong>为GitHub帐号名，这是固定写法。</p><h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><p>下载地址：<a href="https://github.com/git-for-windows/git/releases">Git - Downloading Package</a> ，下载安装。</p><p>在命令行里输入<code>git --version</code>，查看git版本，测试是否安装成功</p><p>若安装失败，解决git安装问题。</p><p><a href="https://weibo.com/liaoxuefeng"><strong>廖雪峰</strong></a>老师的<a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git教程</a> </p><h1 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h1><h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;GitHub用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure><h3 id="生成ssh密钥文件"><a href="#生成ssh密钥文件" class="headerlink" title="生成ssh密钥文件"></a>生成ssh密钥文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure><h3 id="配置ssh密钥"><a href="#配置ssh密钥" class="headerlink" title="配置ssh密钥"></a>配置ssh密钥</h3><p>打开<a href="https://github.com/settings/keys">GitHub_Settings_keys</a> 页面，新建new SSH Key；或打开仓库的Deploy keys页面，新建new deploy key；</p><p>其中Title为标题，Key填生成的id_rsa.pub中内容</p><p>在Git Bash中检测GitHub公钥设置是否成功，输入 <code>ssh git@github.com</code> ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PTY allocation request failed on channel 0</span><br><span class="line">Hi *******! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line">Connection to github.com closed.</span><br></pre></td></tr></table></figure><p>如上则说明成功。</p><h1 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h1><p>下载地址：<a href="https://nodejs.org/en/download/">Download | Node.js</a> ，下载安装。注意安装Node.js会包含<strong>环境变量</strong>及<strong>npm</strong>的安装。</p><p>安装后，在命令行中输入 <code>node -v</code>，检测Node.js是否安装成功 ；输入<code>npm -v</code>，检测npm是否安装成功</p><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p>以<a href="https://hexo.io/zh-cn/">Hexo</a>作为个人博客网站的框架。</p><p>使用npm命令安装Hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>安装完成后，在上一级目录<code>D:\&gt;</code>初始化博客，可以命名为blog，Hexo框架与以后发布的网页都在这个文件夹中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><p>生成并预览博客</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>常用的Hexo 命令</p><p><code>npm install hexo -g</code> #安装Hexo<br><code>npm update hexo -g</code> #升级<br><code>hexo init</code> #初始化博客</p><p>命令简写<br><code>hexo n &quot;我的博客&quot;</code> == <code>hexo new &quot;我的博客&quot;</code> #新建文章<br><code>hexo g</code> == <code>hexo generate</code> #生成<br><code>hexo s</code> == <code>hexo server</code> #启动服务预览<br><code>hexo d</code> == <code>hexo deploy</code> #部署</p><p><code>hexo server</code> #Hexo会监视文件变动并自动更新，无须重启服务器<br><code>hexo server -s</code> #静态模式<br><code>hexo server -p 5000</code> #更改端口<br><code>hexo server -i 192.168.1.1</code> #自定义 IP<br><code>hexo clean</code> #清除缓存，若是网页正常情况下可以忽略这条命令</p><h1 id="推送网站"><a href="#推送网站" class="headerlink" title="推送网站"></a>推送网站</h1><ul><li>blog根目录里的_config.yml文件，称为<strong>站点配置文件</strong></li><li>根目录里的themes文件夹，里面也有个_config.yml文件，称为<strong>主题配置文件</strong></li></ul><p>将我们的Hexo与GitHub关联起来，打开<strong>站点配置文件</strong>_config.yml，翻到最后修改</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repo:</span> <span class="string">在GitHub上创建仓库的完整路径</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>安装Git部署插件，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>此时生成并部署博客</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>博客就被部署到：<strong>用户名</strong>.github.io</p><h1 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h1><p>基于阿里云，在<strong>管理控制台</strong>进入<strong>域名解析</strong>管理页面</p><p>添加一条CNAME解析</p><ol><li>主机记录：@</li><li>记录值：<strong>用户名</strong>.github.io</li><li>其余默认即可</li></ol><p>本地博客文件夹 ，在blog/source目录下，创建一个CNAME文件，输入自定义域名。</p><p>注意：不是txt文件。如果域名带有www，那么访问的时候必须带有www完整的域名才可以访问，但如果不带有www，以后访问的时候带不带www都可以访问。</p><h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><p>更换不同的主题，主题传送门：<a href="https://hexo.io/themes/">Themes</a>。</p><p><a href="https://theme-next.org/">Next</a></p>]]></content>
      
      
      <categories>
          
          <category> Debian </category>
          
          <category> 服务部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Debian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-pip</title>
      <link href="/2021/05/01/Python-pip/"/>
      <url>/2021/05/01/Python-pip/</url>
      
        <content type="html"><![CDATA[<h1 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h1><p>如果有旧的python3.x版本，可以先卸载，但建议不要卸载，因为有很多依赖，替换版本号，执行以下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get autoremove python3.5 python3.5-dev</span><br></pre></td></tr></table></figure><h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><h2 id="补全相关组件："><a href="#补全相关组件：" class="headerlink" title="补全相关组件："></a>补全相关组件：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install dirmngr sudo gcc</span><br></pre></td></tr></table></figure><h2 id="编辑apt的源文件"><a href="#编辑apt的源文件" class="headerlink" title="编辑apt的源文件"></a>编辑apt的源文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>添加以下源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.163.com/ubuntu/ bionic main</span><br></pre></td></tr></table></figure><p>为源添加KEY</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3B4FE6ACC0B21F32</span><br></pre></td></tr></table></figure><p>让服务器使用 “稳定版” 的库成为默认软件库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;APT::Default-Release &quot;stable&quot;;&#x27;</span> | sudo tee -a /etc/apt/apt.conf.d/00local</span><br></pre></td></tr></table></figure><p>更新源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h2 id="安装python3-6"><a href="#安装python3-6" class="headerlink" title="安装python3.6"></a>安装python3.6</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -t bionic install python3.6 python3.6-dev python3-distutils python3-pip</span><br><span class="line">ln -s /usr/bin/python3.6 /usr/bin/python3</span><br></pre></td></tr></table></figure><h2 id="安装pip3-6"><a href="#安装pip3-6" class="headerlink" title="安装pip3.6"></a>安装pip3.6</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/get-pip.py</span><br><span class="line">python3 get-pip.py</span><br></pre></td></tr></table></figure><p>python2.x安装pip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2.7 get-pip.py</span><br></pre></td></tr></table></figure><p>检查setuptools是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">easy_install --version</span><br><span class="line">sudo apt-get clean</span><br></pre></td></tr></table></figure><p>设置使用国内PIP源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.pip/pip.conf</span><br><span class="line">[global]</span><br><span class="line">index-url = http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">trusted-host = mirrors.aliyun.com</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Debian </category>
          
          <category> 服务部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Debian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Syncthing</title>
      <link href="/2021/05/01/Syncthing/"/>
      <url>/2021/05/01/Syncthing/</url>
      
        <content type="html"><![CDATA[<h1 id="Syncthing-Discovery-Server"><a href="#Syncthing-Discovery-Server" class="headerlink" title="Syncthing Discovery Server"></a>Syncthing Discovery Server</h1><p>下载 stdiscosrv 包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/syncthing/discosrv/releases/download/*version*/stdiscosrv-linux-amd64-*version*.tar.gz</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf stdiscosrv-linux-amd64-*version*.tar.gz</span><br></pre></td></tr></table></figure><h1 id="Syncthing-Relay-Server"><a href="#Syncthing-Relay-Server" class="headerlink" title="Syncthing Relay Server"></a>Syncthing Relay Server</h1><p>下载strelaysrv</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/syncthing/relaysrv/releases/download/*version*/strelaysrv-linux-amd64-*version*.tar.gz</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf strelaysrv-linux-amd64-*version*.tar.gz</span><br></pre></td></tr></table></figure><p>放入<code>/usr/bin/relaysrv</code>方便直接运行(顺便改个名)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv strelaysrv-linux-amd64-*version*/strelaysrv /usr/bin/relaysrv</span><br></pre></td></tr></table></figure><p>清理安装包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf strelaysrv-linux-amd64-*version* strelaysrv-linux-amd64-*version*.tar.gz</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">useradd relaysrv -s /bin/<span class="literal">false</span></span><br><span class="line"><span class="comment">#创建存储配置用的目录并修改所有者</span></span><br><span class="line">mkdir /etc/relaysrv</span><br><span class="line">chown relaysrv /etc/relaysrv</span><br></pre></td></tr></table></figure><p>在<code>/etc/supervisord.conf</code>文档最后加上下面这段设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[program:relaysrv]</span><br><span class="line"><span class="built_in">command</span>=relaysrv -keys /etc/relaysrv -pools=<span class="string">&quot;&quot;</span></span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">startsecs=10</span><br><span class="line">stdout_logfile=/var/<span class="built_in">log</span>/relaysrv.log</span><br><span class="line">stdout_logfile_maxbytes=1MB</span><br><span class="line">stdout_logfile_backups=10</span><br><span class="line">stdout_capture_maxbytes=1MB</span><br><span class="line">redirect_stderr=<span class="literal">true</span></span><br><span class="line">user = root</span><br><span class="line"></span><br><span class="line">[program:discosrv]</span><br><span class="line"><span class="built_in">command</span>=discosrv /etc/discosrv</span><br><span class="line">user = root</span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">redirect_stderr=<span class="literal">true</span></span><br><span class="line">startsecs=10</span><br><span class="line">stdout_logfile=/var/<span class="built_in">log</span>/discosrv.log</span><br><span class="line">stdout_logfile_maxbytes=1MB</span><br><span class="line">stdout_logfile_backups=2</span><br><span class="line">stdout_capture_maxbytes=1MB</span><br><span class="line"></span><br><span class="line"><span class="comment">#program后面跟服务的名称</span></span><br><span class="line"><span class="comment">#command是程序的执行路径</span></span><br><span class="line"><span class="comment">#autorstart是表示应用程序随supervisor的启动而启动</span></span><br><span class="line"><span class="comment">#stdout_logfile是捕获标准输出。</span></span><br></pre></td></tr></table></figure><p>也可以选择加上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[include]files = /etc/supervisor/conf.d/*.ini（此地址文件中放置上段设置）</span><br></pre></td></tr></table></figure><p>relaysrv启动配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-debug 启用调试输出-ext-address=&lt;address&gt; 可选的外部地址(将被上报)，能够通过端口转发来监听高权限端口(0-1024)然后外部可以连接这个端口-global-rate=&lt;bytes/s&gt; 全局限速，单位 bytes/s-keys=&lt;dir&gt; 用于存储 cert.pem 和 key.pem 的目录，默认是 <span class="string">&quot;.&quot;</span>(当前目录)-listen=&lt;listen addr&gt; 协议监听的地址，默认是 <span class="string">&quot;:22067&quot;</span>-message-timeout=&lt;duration&gt; 等待消息到达的最大时间(默认 1m0s)-nat 使用UPnP/NAT-PMP来取得外部端口映射-nat-lease=&lt;duration&gt; NAT租赁时间，单位分钟(默认 60)-nat-renewal=&lt;duration&gt; NAT刷新频率，单位分钟(默认 30)-nat-timeout=&lt;duration&gt; NAT发现超时，单位秒(默认 10)-network-timeout=&lt;duration&gt; 客户端和中继之间网络操作的超时，如果在这个时间段内客户端和中继之间没有数据被接收到，那么连接将被终止。此外，如果在这段时间内任何被中继的客户端没有数据发送，这个会话也会被终止(默认 2m0s)-per-session-rate=&lt;bytes/s&gt; 每个会话的限速，单位 bytes/s-ping-interval=&lt;duration&gt; ping的发送间隔(默认 1m0s)-pools=&lt;pool addresses&gt; 中继服务器池的地址，使用逗号分隔多个(默认 <span class="string">&quot;http://relays.syncthing.net/endpoint&quot;</span>)。留空(-pools=<span class="string">&quot;&quot;</span>)来禁止公布这个服务器到池中，以便作为私有中继。-protocol=&lt;string&gt; 监听协议，<span class="string">&quot;tcp&quot;</span>来监听IPv4和IPv6，<span class="string">&quot;tcp4&quot;</span>来监听IPv4，<span class="string">&quot;tcp6&quot;</span>来监听IPv6(默认 <span class="string">&quot;tcp&quot;</span>)-provided-by=&lt;string&gt; 一个可选的描述字段来表示谁提供了这个中继(可以打打广告啥的)-status-srv=&lt;listen addr&gt; 提供状态服务的监听地址(默认 <span class="string">&quot;:22070&quot;</span>)，用于中继服务器池页面来展示服务器状态(传输了多少数据，有多少客户端在线等等)，留空(-status-srv=<span class="string">&quot;&quot;</span>)来禁用这个功能-pools=<span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>带配置文件启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisord -c /etc/supervisor/supervisor.conf</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Debian </category>
          
          <category> 服务部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Debian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Supervisor</title>
      <link href="/2021/05/01/Supervisor/"/>
      <url>/2021/05/01/Supervisor/</url>
      
        <content type="html"><![CDATA[<h1 id="安装supervisor"><a href="#安装supervisor" class="headerlink" title="安装supervisor"></a>安装supervisor</h1><h2 id="pip方式"><a href="#pip方式" class="headerlink" title="pip方式"></a>pip方式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/get-pip.py</span><br><span class="line">python get-pip.py</span><br><span class="line">rm -rf get-pip.py</span><br><span class="line">pip install supervisor</span><br></pre></td></tr></table></figure><h2 id="apt方式"><a href="#apt方式" class="headerlink" title="apt方式"></a>apt方式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install supervisor</span><br></pre></td></tr></table></figure><h1 id="配置supervisor"><a href="#配置supervisor" class="headerlink" title="配置supervisor"></a>配置supervisor</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf(配置文件位置)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;supervisord&quot;</span> &gt;&gt; /etc/rc.local</span><br><span class="line">cat &gt;&gt;/etc/supervisord.conf&lt;&lt;<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line"></span><br><span class="line">[program:relaysrv]</span><br><span class="line"><span class="built_in">command</span>=relaysrv -keys /etc/relaysrv -pools=<span class="string">&quot;&quot;</span></span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">startsecs=10</span><br><span class="line">stdout_logfile=/var/<span class="built_in">log</span>/relaysrv.log</span><br><span class="line">stdout_logfile_maxbytes=1MB</span><br><span class="line">stdout_logfile_backups=10</span><br><span class="line">stdout_capture_maxbytes=1MB</span><br><span class="line">redirect_stderr=<span class="literal">true</span></span><br><span class="line">user = root</span><br><span class="line"></span><br><span class="line"><span class="comment">#program后面跟服务的名称</span></span><br><span class="line"><span class="comment">#command是程序的执行路径</span></span><br><span class="line"><span class="comment">#autorstart是表示应用程序随supervisor的启动而启动</span></span><br><span class="line"><span class="comment">#stdout_logfile是捕获标准输出。</span></span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h1 id="配置Supervisor开机启动"><a href="#配置Supervisor开机启动" class="headerlink" title="配置Supervisor开机启动"></a>配置Supervisor开机启动</h1><h2 id="配置systemctl"><a href="#配置systemctl" class="headerlink" title="配置systemctl"></a>配置systemctl</h2><p>进入<code>/lib/systemd/system</code>目录，并创建<code>supervisor.service</code>文件，该文件内容如下所示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">root@VC:/lib/systemd/system<span class="comment">#whereis supervisord</span></span><br><span class="line">supervisord: *查到的地址*/supervisord</span><br><span class="line">root@VC:/lib/systemd/system<span class="comment"># whereis supervisorctl</span></span><br><span class="line">supervisorctl: *查到的地址*/supervisorctl</span><br><span class="line"><span class="comment"># 创建文件</span></span><br><span class="line">root@VC:/lib/systemd/system<span class="comment"># vim supervisor.service</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=supervisor</span><br><span class="line">After=network.target</span><br><span class="line"> </span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=*查到的地址*/supervisord -c *配置文件位置*/supervisord.conf</span><br><span class="line">ExecStop=*查到的地址*/supervisorctl <span class="variable">$OPTIONS</span> shutdown</span><br><span class="line">ExecReload=*查到的地址*/supervisorctl <span class="variable">$OPTIONS</span> reload</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=42s</span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h2 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@VC:/lib/systemd/system<span class="comment"># systemctl enable supervisor.service</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/supervisor.service to /lib/systemd/system/supervisor.service.</span><br><span class="line">root@VC:/lib/systemd/system<span class="comment"># systemctl daemon-reload</span></span><br></pre></td></tr></table></figure><h2 id="修改文件权限为766"><a href="#修改文件权限为766" class="headerlink" title="修改文件权限为766"></a>修改文件权限为766</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@VC:/lib/systemd/system<span class="comment"># chmod 766 supervisor.service</span></span><br></pre></td></tr></table></figure><h2 id="supervisorctl命令行下的命令："><a href="#supervisorctl命令行下的命令：" class="headerlink" title="supervisorctl命令行下的命令："></a>supervisorctl命令行下的命令：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl status  <span class="comment">#查看supervisord监控的所有进程的状态</span></span><br><span class="line">supervisorctl celery status  <span class="comment">#查看celery进程的状态</span></span><br><span class="line">supervisorctl stop xxx  <span class="comment">#停止某一个进程(xxx)，xxx为[program:theprogramname]里配置的值</span></span><br><span class="line">supervisorctl start xxx  <span class="comment">#启动某个进程</span></span><br><span class="line">supervisorctl restart xxx  <span class="comment">#重启某个进程</span></span><br><span class="line">supervisorctl stop groupworker  <span class="comment">#重启所有属于名为groupworker这个分组的进程</span></span><br><span class="line">supervisorctl stop all  <span class="comment">#停止全部进程，注：start、(start,restart同理)restart、stop都不会载入最新的配置文件</span></span><br><span class="line">supervisorctl reload  <span class="comment">#重启supervisor</span></span><br><span class="line">supervisorctl update  <span class="comment">#根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启。当配置文件修改后，要执行这条命令。</span></span><br><span class="line"><span class="comment">#用stop停止掉的进程，即使配置文件设置了autorestart=true，用reload或者update都不会自动重启。</span></span><br><span class="line">supervisorctl shutdown  <span class="comment"># 关闭supervisord,会同时关闭supervisord监控的所有进程</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Debian </category>
          
          <category> 服务部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Debian </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
